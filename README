myshell version 2

Description
===================================================================================================
 This program is a simple system shell program. It allows entering commands in both interactive mode and in the form of one or more batch file(s). 


Building
===================================================================================================
A makefile is provide for compilation. It assumes a recent version of gcc is installed that supports the c99 standard. The build was tested on Ubuntu Linux 12.04 with gcc 4.6.3. To build type:

	make

In a terminal in the source directory.
 To clean the source directory type:
	make clean

In a terminal.

Running myshell
===================================================================================================
To run in interactive mode, type

	./myshell

In the source directory. This will display a prompt that consists of the users login followed by a '$'.

To run in batch mode, invoke the program in the same manner followed by one or more text files containing commands to be executed by the shell:

	./myshell batch.sh batch2.sh batch3.sh

Each file will be executed in sequence. If the 'exit' command is present in any of the files, the shell will immediately stop processing commands in the current file and proceed to process the next file (if any). After each script's exit command or end of file, the current job count will be displayed, but will not be reset for any succeeding scripts. The number of background jobs will also be displayed. This number should not be interpreted as the number of jobs currently running in the background, but rather the total number of jobs run in the background since the start of the program.

Examples
===================================================================================================This is an example of a user 'jack' running myshell in interactive mode:

	jack@home$ ./myshell
	jack$ ls -a
	Job 1 : <ls> [-a] 
	jack$ killall emacs; vim; cat file1 file2 > /dev/null
	Job 2 : <killall> [emacs] 
	Job 3 : <vim> 
	Job 4 : <cat> [file1] [file2] [>] [/dev/null] 
	jack$ exit
	jack@home$

The same could be accomplished using a batch file. Assuming that there is a file named 'batch.sh' that looks like:

	ls -a
	killall emacs; vim
	cat file1 file2 > /dev/null

Then the executing the shell in batch mode would produce the following:

	jack@home$ ./myshell batch.sh
	Job 1 : <ls> [-a] 
	Job 2 : <killall> [emacs] 
	Job 3 : <vim> 
	Job 4 : <cat> [file1] [file2] [>] [/dev/null]  
	jack@home$ 
	
	
Example of interactive shell from Project01 documentation:

	user@build:~/shared/os/441Project01$ ./myshell
	user$ /bin/date
	Job   1 : </bin/date>
	user$ /bin/pwd
	Job   2 : </bin/pwd>
	user$ /bin/ls assign1 ..
	Job   3 : </bin/ls> [assign1] [..]
	user$
	user$ /bin/date; /bin/pwd ; /bin/ls assign1 ..
	Job   4 : </bin/date>
	Job   5 : </bin/pwd>
	Job   6 : </bin/ls> [assign1] [..]
	user$
	user$ /bin/sleep 5 & /bin/sleep 4 & /bin/sleep 3 &
	Job   7*: </bin/sleep> [5]
	Job   8*: </bin/sleep> [4]
	Job   9*: </bin/sleep> [3]
	user$ jobs
	Job  10^: <jobs>
	user$
	user$ exit
	Job  11^: <exit>
	Total number of jobs: 9
	Total number of jobs in background: 3
	user@build:~/shared/os/441Project01$



Tests
===================================================================================================
To ensure the proper functionality of your installation, you may run the test suite provided in the 'test' directory.
The test suite consists of several batch scripts to run

****** Test 1 ******
./myshell test1.sh
- This test checks proper operation of background checks and the 'jobs' command.
Some sleep jobs are launched in the background, then jobs is called periodically
separated by sequential sleep statements, to illustrate the transition from
Running->Done->Cleared out for background jobs. The high job 'count' after exit
is due to the extra jobs from the 'echo' statements.

Example output:
user@build$ ./myshell test1.sh
Launching sleep 5 and sleep 10 in background...
Sleeping 2 seconds...
Calling 'jobs'
[ 2]   Running   sleep 5 &
[ 3]   Running   sleep 10 &
Sleeping 6 seconds...
Calling 'jobs'
[ 2]   Done      sleep 5 &
[ 3]   Running   sleep 10 &
Sleeping 3 seconds...
Calling 'jobs'
[ 3]   Done      sleep 10 &
Calling 'jobs' again...
Exiting...
Total number of jobs: 14
Total number of jobs in background: 12

****** Test 2 ******
file: test2.sh
command: cd tests; ../myshell test2.sh
This test checks proper handling of multiple batch files. It also illustrates the behavior of the exit command with 
multiple input files. The test2.sh script runs myshell with 3 input files:
test2_input1.sh test2_input2.sh test2_input3.sh.
Example output is located in the file tests/test2_results.txt

The total number of jobs that the invoked instance runs (the innner shell) is 22 total jobs and 3 jobs in the background.
The total number of jobs run for the outer shell (the one that invokes test2.sh) is 5.
There is an echo command in input 3 that should never be executed on proper functioning of the 'exit' command.




 


Know Bugs and Limitations
===================================================================================================
Maximum input for a given line is 4095 bytes.

Only unix-style line terminators ('\n') are supported in script files. Windows style (cr & lf) will result in undefined operation, and are totally unsupported.

Typing control-D when the prompt is non empty (i.e. the user has typed something in the current line), results in the program not terminating.  Pressing control-D twice is equivalent to hitting the enter key except the newline character is not present.

An end of-file follows the same code path as the 'exit' command, and so the <exit> message will be displayed exactly as if the 'exit' command had been entered.

